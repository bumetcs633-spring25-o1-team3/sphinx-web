{
    "Software Quality Assurance (SQA)": "A systematic process to ensure software meets specified requirements and is free of defects.",
    "Verification": "The process of evaluating work products to ensure they conform to specifications.",
    "Validation": "The process of testing software to ensure it meets user requirements and expectations.",
    "Black Box Testing": "A software testing method that examines functionality without knowing internal code or logic.",
    "White Box Testing": "A software testing approach that examines internal structures or workings of an application.",
    "Unit Testing": "Testing individual components or modules of a program to ensure correctness.",
    "Integration Testing": "Testing multiple modules together to ensure they interact correctly.",
    "System Testing": "Testing the complete system as a whole to validate its behavior.",
    "Regression Testing": "Re-running test cases to ensure that new changes have not introduced defects.",
    "Smoke Testing": "A preliminary test to check if the basic functionalities of software are working before more extensive testing.",
    "Acceptance Testing": "A testing phase where the software is validated against business requirements.",
    "Static Analysis": "Examining code without executing it to find potential issues or vulnerabilities.",
    "Dynamic Analysis": "Analyzing a program's behavior during execution.",
    "Test-Driven Development (TDD)": "A development process where tests are written before implementing the actual code.",
    "Mutation Testing": "A software testing technique that introduces small changes in the code to test the effectiveness of test cases.",
    "Software Reliability": "The probability of a software system performing without failure under given conditions.",
    "Fault Tolerance": "The ability of a system to continue functioning despite failures.",
    "Penetration Testing": "Simulating cyberattacks to identify vulnerabilities in a system.",
    "Static Code Analysis Tools": "Tools like SonarQube or Fortify that analyze code for defects without execution.",
    "Security Testing": "Testing designed to uncover vulnerabilities and ensure data protection.",
    "Risk-Based Testing": "Prioritizing testing efforts based on risk assessment of software components.",
    "Equivalence Partitioning": "A testing technique that divides input data into equivalent groups for testing.",
    "Boundary Value Analysis": "Testing method that focuses on values at the edges of input ranges.",
    "Fuzz Testing": "A technique that inputs large amounts of random data to find vulnerabilities in software.",
    "Software Development Life Cycle (SDLC)": "A structured approach for software creation, including phases like planning, design, coding, testing, and deployment.",
    "Agile Testing": "A testing practice that follows Agile methodologies, emphasizing flexibility and continuous feedback.",
    "Test Automation": "Using tools and scripts to execute test cases instead of manual testing.",
    "Defect Density": "The number of defects found per unit size of code, used as a software quality metric.",
    "Code Coverage": "A measure of how much of the code is executed during testing.",
    "Secure Coding Practices": "Techniques used to prevent security vulnerabilities such as SQL injection and XSS.",
    "Software Metrics": "Quantitative measures used to assess the quality, performance, and maintainability of software."
}
  